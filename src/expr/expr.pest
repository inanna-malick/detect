WHITESPACE   =  _{ " " | "\t" | NEWLINE }


bare_char = { ASCII_ALPHANUMERIC | "." | "_" | "/" | "-" | "+" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "~" | escaped }
inner_char = @{ !("\"" | "'") ~ ANY }

escaped = { "\\" ~ escapable }
escapable = { "n" | "\\" | "\""}

program         =   { SOI ~ expr ~ EOI }
  expr          =   { prefix* ~ primary ~ (infix ~ prefix* ~ primary )* }
    infix       =  _{ and | or }
      and       =   { "&&" } // logical and
      or        =   { "||" } // logical or
    prefix      =  _{ neg }
      neg       =   { "!" } // Negation
    primary     =  _{ predicate | "(" ~ expr ~ ")" }


predicate =  { selector ~ op ~ rhs }
  selector = { name | path | ext | size | type | contents | modified | created | accessed }
    name     = { "filename"  | "name" }
    path     = { "filepath"  | "path" }
    ext      = { "extension" | "ext"  }
    size     = { "filesize"  | "size" }
    type     = {"filetype"   | "type" }
    contents = { "contents"  | "file" }
    modified = { "modified" | "mtime" }
    created  = { "created"  | "ctime" }
    accessed = { "accessed" | "atime" }
  op      = _{ match_ | ne | eq | gteq | lteq | gt | lt | like | in_ | contains }
    eq       = { "==" | "=" }         // exact equals
    ne       = { "!=" }               // not equal
    like     = { "~=" | "~" }         // regex (backward compat)
    match_   = { "=~" }               // regex (explicit)
    gteq     = { ">=" }
    lteq     = { "<=" }
    gt       = { ">" }
    lt       = { "<" }
    in_      = { "in" }               // set membership
    contains = { "contains" }         // substring match
  rhs     = { set_literal | quoted_string | bare_token }
    set_literal = { "[" ~ ws* ~ set_items ~ ws* ~ "]" }
      set_items = { set_item ~ (ws* ~ "," ~ ws* ~ set_item)* }
      set_item = { quoted_string | bare_token }
    quoted_string = ${ double_quoted | single_quoted }
      double_quoted = { "\"" ~ inner_double ~ "\"" }
      single_quoted = { "'" ~ inner_single ~ "'" }
      inner_double = @{ (!"\"" ~ ANY)* }
      inner_single = @{ (!"'" ~ ANY)* }
    bare_token = @{ bare_char+ }
  ws = _{ " " | "\t" }
